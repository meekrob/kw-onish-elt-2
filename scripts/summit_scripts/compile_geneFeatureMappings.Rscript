## Rscript thisfile.Rscript outfileroot infile1.bed infile2.bed ...
library(stringr, quietly=TRUE)
library(ChIPpeakAnno, quietly=TRUE)
library(GenomicRanges, quietly=TRUE)

getCodingGenes = function(peaks, genes_coding, within_genes_kb = 5){
  peaks$name = sprintf("peak_%d", 1:length(peaks))
  cat("getCodingGenes()\n")
  genes_coding_noMT = genes_coding[genes_coding$chromosome_name != 'MtDNA',]
  
  bedformat = genes_coding_noMT[,c('chromosome_name','start_position','end_position','strand','wbps_gene_id')]
  bedformat$strand = with(bedformat, ifelse(strand==1, '+','-'))
  cat("...sorting on chromosome_name, start_position\n")
  bedformat = bedformat[with(bedformat, order(chromosome_name, start_position)), ] # WS271 as of this writing
  
  # add 'chr'
  genes_coding_noMT$chromosome_name = paste('chr', genes_coding_noMT$chromosome_name, sep='')
  # strands must be '+/-', but paramart returns 1/-1
  strand_plus_minus = genes_coding_noMT$strand
  strand_plus_minus[ strand_plus_minus == '1'] <- '+'
  strand_plus_minus[ strand_plus_minus == '-1'] <- '-'
  genes_coding_noMT$strand = strand_plus_minus
  all_CDS_genes = makeGRangesFromDataFrame(genes_coding_noMT, 
                                           keep.extra.columns = T, 
                                           seqnames.field='chromosome_name', 
                                           start.field="start_position", 
                                           end.field="end_position")
  
  names(all_CDS_genes) <- all_CDS_genes$wbps_gene_id
  all_CDS_genes$name = ifelse(all_CDS_genes$wormbase_locus == '', all_CDS_genes$wormbase_gseq, all_CDS_genes$wormbase_locus)
  
  ap = annotatePeakInBatch(
    peaks,
    AnnotationData = all_CDS_genes,
    PeakLocForDistance = "middle",
    output = "nearestLocation",
    FeatureLocForDistance = c("middle"),
    bindingRegions = c(-within_genes_kb, within_genes_kb) # if you make this assymetric, change the label below
  )
  # unmapped +/- 5Kb
  nappy = ap[is.na(ap$feature)]
  # mapped
  ap = ap[!is.na(ap$feature)]
  # reduce list down to the minumum absolute value of distancetoFeature
  cat("...ap[ order(ap$name, abs(ap$distancetoFeature) )]\n")
  ap.ordered = ap[ order(ap$name, abs(ap$distancetoFeature) )]
  ap.unique = ap[ match(unique(ap.ordered$name), ap.ordered$name)]
  ap.rejoined = c(ap.unique, nappy)
  cat("...ap.rejoined[ order(ap.rejoined$name)]\n")
  ap.rejoined = ap.rejoined[ order(ap.rejoined$name)]
  
  ap = ap.rejoined
  insideFeatureLabels = as.character(ap$insideFeature)
  insideFeatureLabels[is.na(ap$feature)] <- sprintf("unmapped - %dKb",within_genes_kb) 
  insideFeatureLabels[ap$shortestDistance > within_genes_kb * 1000] <- sprintf("unmapped - %dKb",5) 
  ap$insideFeature <- as.factor(insideFeatureLabels)
  return(ap)
  cat("leaving getCodingGenes()\n")
}

readBedOrRds <- function(filepath) {
    basepath = dirname(filepath)
    bedfilename <- filepath
    rdsfilename <- str_replace(bedfilename, '.bed', '.rds')
    if (file.exists(rdsfilename)) {
        # load serialized data file
        cat("Loading RDS File", rdsfilename, "\n")
        peaks = readRDS(rdsfilename)
    }
    else {
        # process BED file
        cat("Reading BED File", bedfilename, "\n")
        peak_df = read.table(bedfilename, col.names=c("seqname","start","end"))
        peaks = GenomicRanges::makeGRangesFromDataFrame(peak_df, starts.in.df.are.0based = T)
        # save RDS file
        cat("Saving RDS File", rdsfilename, "\n")
        saveRDS(peaks, rdsfilename)
    }
    return(peaks)
}

args = commandArgs(trailingOnly = T)
outputFileRoot = args[1]

bigtab = c()

for (filepath in args[2:length(args)]) {
    
    peaks = readBedOrRds(filepath)
    load('genes_coding.RData')
    ap = getCodingGenes(peaks, genes_coding)
    mapping_breakdown = table(ap$insideFeature)
    for (feature in c('unmapped - 5Kb', 'upstream', 'overlapStart', 'inside', 'includeFeature', 'downstream', 'overlapEnd')) {
        mapping_breakdown[feature] = ifelse(feature %in% names(mapping_breakdown), mapping_breakdown[feature], 0)
    }
    bigtab = rbind(bigtab, mapping_breakdown)

}

outRDSfile = paste(outputFileRoot, ".rds", sep='')
saveRDS(bigtab, outRDSfile)
